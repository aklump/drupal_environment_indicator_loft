<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Markup;
use Drupal\Core\Template\Attribute;

/**
 * Implements hook_library_info_alter().
 */
function environment_indicator_loft_library_info_alter(&$libraries, $extension) {
  if ($extension === 'environment_indicator') {
    // Remove toolbar color changing stuff.
    unset($libraries['drupal.environment_indicator']['js']['js/environment_indicator.js']);
    unset($libraries['drupal.environment_indicator']['js']['js/color.js']);

    // Remove the default CSS.
    unset($libraries['drupal.environment_indicator']['css']['component']['css/environment_indicator.css']);

    // Add our custom CSS.
    $new_path = '/' . \Drupal::service('extension.list.module')
        ->getPath('environment_indicator_loft');
    $libraries['drupal.environment_indicator']['css']['component'][$new_path . '/css/environment_indicator.css'] = [];
    $libraries['drupal.environment_indicator']['js'][$new_path . '/js/environment_indicator_loft.js'] = [];
    $libraries['drupal.environment_indicator']['dependencies'][] = 'core/jquery';
    $libraries['drupal.environment_indicator']['dependencies'][] = 'core/jquery.once';
    $libraries['drupal.environment_indicator']['dependencies'][] = 'core/jquery.cookie';
  }
}

/**
 * Implements hook_theme_registry_alter().
 */
function environment_indicator_loft_theme_registry_alter(&$theme_registry) {
  if (isset($theme_registry['environment_indicator'])) {
    $module_path = \Drupal::service('extension.list.module')
      ->getPath('environment_indicator_loft');
    $theme_registry['environment_indicator']['path'] = $module_path . '/templates';
  }
}

/**
 * Implements hook_preprocess_THEME().
 */
function environment_indicator_loft_preprocess_environment_indicator(&$vars) {
  $element = $vars['element'];
  $vars['color'] = new Attribute([
    'style' => implode(';', [
      'color:' . $element['#fg_color'],
      'background-color:' . $element['#bg_color'],
    ]),
  ]);

  $active_environment = \Drupal::config('environment_indicator.indicator');
  $vars['autofade'] = intval($active_environment->get('autofade'));
  $vars['throttle'] = intval($active_environment->get('throttle'));
  $vars['manual_cookie'] = intval($active_environment->get('manual_cookie')) ?: 1800;

  $vars['override'] = $active_environment->get('override');

  $vars['branch'] = $active_environment->get('branch') ?? _environment_indicator_loft_git_branch();
  if ($vars['branch']) {
    $vars['git_icon'] = Markup::create('<svg width="17" height="17" viewBox="0 0 17 17" xmlns="http://www.w3.org/2000/svg"><path d="M15.698 7.401L8.712.416a1.03 1.03 0 0 0-1.457 0l-1.45 1.45 1.84 1.84a1.223 1.223 0 0 1 1.55 1.56l1.773 1.774a1.226 1.226 0 1 1-.734.691L8.578 6.077v4.353a1.226 1.226 0 1 1-1.008-.036V6a1.226 1.226 0 0 1-.666-1.608L5.093 2.58l-4.79 4.79a1.03 1.03 0 0 0 0 1.457l6.986 6.986a1.03 1.03 0 0 0 1.457 0l6.953-6.953a1.03 1.03 0 0 0 0-1.458" fill="' . $element['#fg_color'] . '" stroke="' . $element['#bg_color'] . '" stroke-width=".5" fill-rule="evenodd"/></svg>');
  }

  // Clear the configuration setting if it's expired so that config export is
  // bloated with a moot expired value.
  $should_hide = \Drupal::state()
    ->get('environment_indicator_loft.disable_until');
  if (is_int($should_hide) && $should_hide <= time()) {
    \Drupal::state()->delete('environment_indicator_loft.disable_until');
    $should_hide = FALSE;
  }

  $should_hide_by_cookie = !empty($_COOKIE['Drupal_visitor_environment-indicator']);
  if ($should_hide_by_cookie) {
    $should_hide = $should_hide_by_cookie;
    unset($should_hide_by_cookie);
  }

  if ($should_hide) {
    $vars['attributes']['class'][] = 'is-hidden';
    $vars['autofade'] = 0;
    $vars['throttle'] = 0;
  }
}

/**
 * Implements hook_form_alter().
 */
function environment_indicator_loft_form_environment_indicator_settings_form_alter(array &$form) {
  $key = (string) t('Hide for...');
  $form['disable_until'] = [
    '#title' => t('Indicator display'),
    '#type' => 'select',
    '#options' => [
      0 => t('Choose...'),
      $key => [
        600 => t('10 mins'),
        1800 => t('30 mins'),
        3600 => t('1 hour'),
        7200 => t('2 hours'),
        21600 => t('6 hours'),
        86400 => t('1 day'),
      ],
      (string) t('Reset') => [
        0 => t('Show immediately'),
      ],
    ],
  ];

  $disable_until = \Drupal::state()
    ->get('environment_indicator_loft.disable_until', 0);
  if ($disable_until) {
    $disable_until -= time();
  }
  if ($disable_until) {
    $options = array_keys($form['disable_until']['#options'][$key]);
    do {
      $default_value = array_shift($options);
    } while ($default_value < $disable_until && $options);
    $form['disable_until']['#default_value'] = $default_value;
  }

  $form['#submit'][] = 'environment_indicator_loft_form_environment_indicator_settings_form_submit';
}

/**
 * Form submit handler for the admin form.
 *
 * @param array $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function environment_indicator_loft_form_environment_indicator_settings_form_submit(array $form, FormStateInterface $form_state) {
  $value = $form_state->getValue('disable_until');
  if ($value) {
    $value += time();
    \Drupal::state()->set('environment_indicator_loft.disable_until', $value);
  }
  else {
    \Drupal::state()->delete('environment_indicator_loft.disable_until');
    user_cookie_delete('environment-indicator');
  }
}

/**
 * Get the current Git branch.
 *
 * @return string
 *   The git branch of the Drupal root.
 */
function _environment_indicator_loft_git_branch() {
  static $git_branch;
  if ($git_branch === NULL) {
    $git_branch = exec('cd ' . \Drupal::root() . ' && git rev-parse --abbrev-ref HEAD', $git);
    \Drupal::moduleHandler()->alter('loft_deploy_git_branch', $git_branch);
  }

  return $git_branch;
}

